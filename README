PHP 7.0.10 
Ubuntu 14.04
MySQL 5.5.49

FILE STRUCTURE
--------------------



Modify core/init.php

	//'host' => '127.0.0.1',
    'host' => getenv('IP'),
	//'username' => 'root',
	'username' => getenv('C9_USER'),
	'password' => '',
	'db' => 'dblogin',
	'dbport' => 3306
	
Database table relationship
------------------------------


Create table using following scripts
------------------------------------------

Create indes using following script
-----------------------------------------


Enter these data using these scripts
--------------------------------------


You can enter more data through registration.



Layers of security
-------------------
- All passwords in the DB are encrypted with salt.

- FIEO - Filter In Escape Out was practiced.
All inputs are validated and filterd and all outputs to the brower were escaped.
In this case, email and user names are validated and filtered.

- Another layer of SQL injection was implemented with implementation of 
PDO prepare statement and binding valuew.

- CSRF injection prevention was implemented with token checks.

Scalability and Performance
--------------------------------------
Implementation of Singleton should eliminate unnecessary DB connection.
Database tables are indexed on the columns that use SELECT statement.
In this project, they are email column.
For the most visit stat report, visit_count is indexed.
Key value hash map data structure is used.  In this case, passwords match and also
verifying if inputs meet all the input requirements.
This makes the searching very fast which is time complexity of O(1).
Although, the data we used is very little, it can make a dramatic impact on a huge
data.

Expandability
---------------
Created a report interface call IReport to extend more reports.
Report has similar pattern: Query and Format.

Testability
---------------
Try to follow SOLID principle for each class and each methods.
Single responsibility per class per method.
Should be easy to test.  Some tests require test setup such as setting up $_SESSION[] variables and etc.

Please refer to test strategy of each module.
Wrote a sample of unit tests. 

Maintainability of code
-------------------------
- Code is written such to reduce the coupling.
  This means that one change should reduce the impact of other objects.
  
-Usage of core/init.php spl_autoload_register() eliminates the need to 
 declare require_once() on individual files.
 
-Config related data is stored in core/init.php.
 Finding the value in O(1) by hash map traversing is defined in classes/Config.php.
 
-Each class and each method is well documented. 


Objects Relationship
--------------------------
No inheritance, no polymorphism, no composition.
Encapsulation is implemented with private functions and members.

All the relationship is 'use'. e.g. User object uses Session object.

There are # objects with static functions.
Since variables and functions are within scope
there won't be any collisions.

Objects Relationship Diagram
-------------------------------

Web page flow diagram
-----------------------

AJAX communication returning JSON
-----------------------------------
PHP backend scripts return in JSON.
So there is a lot of room for expansion in
data which translates into more front end
functions.


Design Pattern
--------------------
Uses Singleton Design pattern.
This will enhance the effectiveness DB connection.
Remember DB connection is the most expensive.

Description of each class
---------------------------

DB.php
------
This class packages SQL and executes SQL.
This class avoids the code to implement tedious implementation of SQL statement.
It is a wrapper to SQL.

Variable name convention
---------------------------
Private variables start with underscore: e.g _user denotes this is a private variable.
Try the camel convention: e.g. userName.


Filename convention
----------------------
Filename and class name must match in order spl_autoload_register to work.
Class file names always start with capital letter.
Those files that are not capital are considered non class files.

Rooms for Improvement 
-----------------------
Inputs validation can be more centralized.
Input rules can be inserted into init.php.
Just read the rules from init.php instead of explicitly
defining it in the code.
More tests - especially the implementation of penetrating tests on UI.

Suggestion of testing Remember ME
------------------------------------